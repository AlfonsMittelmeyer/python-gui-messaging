from DynTkInter import *






# Inside Toplevel Window DynTkInterGuiCreator  - LabelFrame Widget Selection =======================


# Inside LabelFrame Widget Selection =============================================

goIn()
Frame("Buttons")
pack()

# ---- Receiver for message 'CREATE_WIDGET_REQUEST' - somewhere it has to be: 
# creates the widget with Class name and widget name in the current User selection and sends the message CREATE_WIDGET_DONE which contains the current user widget selection

do_receive('CREATE_WIDGET_REQUEST',"""
eval(Msg()[0]+"('"+Msg()[1]+"')")
try: text(Msg()[1])
except: pass
send('SELECTION_CHANGED')
""")


do_receive("SELECTION_CHANGED", lambda: send('SHOW_SELECTION'))
do_receive("SELECTION_LAYOUT_CHANGED", lambda: send('SHOW_SELECTION'))

# Inside Frame Widget Buttons =============================================

goIn()
Frame("Buttons1")
pack()

# Inside Frame Widget Buttons1 =============================================

goIn()

Button("gotoRoot",text="\\\\")	
pack(side=LEFT)

Button("gotoTopLevel",text="\\\\\\\\")	
pack(side=LEFT)

Button("refresh",text="refresh")	
pack(side=LEFT)

Button("unlayout",text="unlayout")
pack(side=LEFT,anchor=W)

Button("rename",text="rename")
pack(side=LEFT,anchor=W)

Button("destroy",text="destroy")
pack(side=LEFT,anchor=W)

# -------------- button commands ----------------------------------

# if somebody uses commands during program is running and wants to update showing the selection

# do the unlayout and send a 'BASE_LAYOUT_WIDGET_CHANGED' message
widget("unlayout").do_command("""
if this().Layout & 7:
	unlayout()
	send('BASE_LAYOUT_WIDGET_CHANGED',this())
	send("SELECTION_LAYOUT_CHANGED")
""")

widget("refresh").do_command("""
send('SELECTION_CHANGED',this())
""")

widget("gotoRoot").do_command("""
gotoRoot()
send('SELECTION_CHANGED',this())
""")

widget("gotoTopLevel").do_command("""
gotoTop()
send('SELECTION_CHANGED',this())
""")

# if the container is selected, a info messagebox occurs - a container has to be renamed from outside
# otherwise the message "RENAME_WIDGET" is sent
widget("rename").do_command("""
if _Selection._widget == _Selection._container: messagebox.showinfo('rename container "."',\"\"\"
Please rename containers from outside!
Select: '<='\"\"\",parent=Par())
else: send("RENAME_WIDGET",getNameAndIndex())
""",container())



# if the container is selected, a info messagebox occurs - a container has to be renamed from outsidewidget("destroy").do_command("""
# otherwise a messagebox occurs, which asks for really
# if the answer is yes, the element is destroyed and the selection changes to the container
widget("destroy").do_command("""
if _Selection._widget == _Selection._container:
	push("destroy container content")
	if messagebox.askyesno(top(),pop()+nl()+'Really?',parent=Par()):
		container().destroyActions()
		container().destroyContent()
		send('SHOW_SELECTION')
else:
	push(getNameAndIndex())
	if top()[1] == -1: push('destroy '+"'"+top()[0]+"'")
	else: push('destroy '+"'"+top()[0] + ' [' + str(top()[1])+']'+"'")
	if messagebox.askyesno(top(),pop()+nl()+'Really?',parent=Par()):
		destroyElement(top()[0],top()[1])
		cdDir()
		send("SELECTION_CHANGED",this())
	pop()
""",container())


# End of: Inside Frame Widget Buttons1 =============================================

goOut()

# Inside Frame Widget Buttons =============================================

Frame("Buttons2")
pack(fill=X)

# Inside Frame Widget Buttons2 =============================================

goIn()

Button("save",text="save")
pack(side=LEFT,anchor=W)

Button("load",text="load & run")
pack(side=LEFT,anchor=W)

Button("loadedit",text="load & edit")
pack(side=LEFT,anchor=W)

Button('code',text="""code""",state="disabled")
pack(side=LEFT)


# -------------- button commands ----------------------------------

#widget("save").do_command("""
#activateUserSelection()
#saveElement()
#""")

widget("save").do_command("""
if this() == container(): send("SAVE_WIDGET",None)
else: send("SAVE_WIDGET",getNameAndIndex())
""")

widget("load").do_command("""
push(Selection())
goOut()
if this() == container():
	if this() == _AppRoot._widget:
		send('LOAD_WIDGET','Application Window')
	else: send('LOAD_WIDGET','Toplevel Window')
else: send('LOAD_WIDGET',"Container: " + getNameAndIndex()[0])
setSelection(pop())
""")

widget("loadedit").do_command("""
push(Selection())
goOut()
if this() == container():
	if this() == _AppRoot._widget:
		send('LOAD_EDIT','Application Window')
	else: send('LOAD_EDIT','Toplevel Window')
else: send('LOAD_EDIT',"Container: " + getNameAndIndex()[0])
setSelection(pop())
""")

VAR["CodeEditCancel"] = EvCmd("Me().myRoot().destroy()")


VAR['TestSyntax'] = EvDataCmd("""
push(True)
push(Selection())
setWidgetSelection(Me())
goto("Syntax")
try:
	EvCmd(Par()[0].get("1.0",'end-1c'))
	config(text="Syntax OK",fg="#006000")
	pack(side=LEFT)
except SyntaxError as e:
	config(text="SyntaxError in line "+str(e.lineno),fg="red")
	pack(side=LEFT)
	traceback.print_exc()
	Stack[-2] = False
setSelection(pop())
"""
)

VAR["Test"] = EvDataCmd("""
Data().execute()
pop()
""",VAR['TestSyntax'])


VAR['Execute'] = EvDataCmd("""
push(False)
push(Selection())
Data().execute()
if pop():
	try:	
		push(open("tempcode.txt","w"))
		push(True)
	except:
		push(False)
		setWidgetSelection(Me())
		widget("Syntax").config(text="IOError: couldn't open file 'tempcode.txt'",fg="red")
	if pop():
		top().write(Par()[1]._widget.CODE)
		pop().close()
		destroyReceivers(Par()[1]._widget)
		setWidgetSelection(Par()[1]._widget)
		goIn()
		try:		
			EvCmd(Par()[0].get("1.0",'end-1c')).execute()
		except:
			traceback.print_exc()
			quit()
		setWidgetSelection(Me())
		widget("Syntax").config(text="Code Run OK",fg="#006000")
		Stack[-2] = True
setSelection(pop())
""",VAR['TestSyntax'])




VAR["OK"] = EvDataCmd("""
Data().execute()
if pop():
	Par()[1]._widget.CODE = Par()[0].get("1.0",'end-1c')
	Me().myRoot().destroy()
""",VAR['Execute'])


VAR["RunCode"] = EvDataCmd("""
Data().execute()
pop()
""",VAR['Execute'])

VAR["LoadFrame"] = EvCmd("""
Frame('LoadFrame')
goIn()
Label(text="File:").pack(side=LEFT)
Entry(width=15).pack(side=LEFT)
this().delete(0,END)
this().insert(0,"tempcode.txt")
Button("Load",text="Load").pack(side=LEFT)
Label("IOError")
goOut()
""")

VAR["LoadExecute"] = EvCmd("""
push(Selection())
setWidgetSelection(Me())
widget('IOError').unlayout()
try:
	push(open(widget('Entry').get(),'r'))
	Par().delete(1.0, END)	
	Par().insert(END,top().read())
	pop().close()
except:
	widget('IOError').config(text="IOError: couldn't open file '"+widget('Entry').get()+"'",fg="red")
	widget('IOError').pack(side=LEFT)
setSelection(pop())
""")

widget("code").do_command("""
push(Selection())
if this() == _AppRoot._widget:
	push(("Application",-1))
else:
	if this() == container(): goOut()
	push(getNameAndIndex())

push(this().CODE)

Toplevel("ToplevelCodeEdit")
config(title = "Code Edit for "+ second()[0])
Text('CodeText',width=120,font=('Courier New',11)).insert(END,pop())
pop() # name for title
push(widget('CodeText'))
Frame('Frame')
goIn()
Button('OK',text='OK',bg="green",width=6).pack(side=RIGHT)
do_command(Par()[3],(top(),second()))
Par()[4].execute()
pack(side=LEFT)
goIn()
widget("Load").do_command(Par()[5],top())
widget("Entry").do_event('<Return>',Par()[5],top())
goOut()
Button('Cancel',text='Cancel',bg="#ff7040").pack(side=RIGHT)
do_command(Par()[0],(top(),second()))
Button('RunCode',text='Run Code').pack(side=RIGHT)
do_command(Par()[2],(top(),second()))
Label('Syntax',text="Syntax OK",fg="#006000",padx=5)
Button('Test',text='Test Syntax').pack(side=RIGHT)
do_command(Par()[1],(pop(),))
goOut()
widget('CodeText').pack()
widget('Frame').pack(anchor='e')
setSelection(pop())
goIn()
send('SELECTION_CHANGED',this())
""",(VAR["CodeEditCancel"],VAR['Test'],VAR['RunCode'],VAR['OK'],VAR['LoadFrame'],VAR['LoadExecute']))

VAR.pop("CodeEditCancel",None)
VAR.pop('TestSyntax',None)
VAR.pop("Test",None)
VAR.pop('Execute',None)
VAR.pop("OK",None)
VAR.pop("RunCode",None)
VAR.pop("LoadFrame",None)
VAR.pop("LoadExecute",None)

def function(code = widget("code")):
	if this().isContainer: code.config(state = 'normal') 
	else: code.config(state = 'disabled')

do_receive('SELECTION_CHANGED',function)


# End of: Inside Frame Widget Buttons2 =============================================

goOut()


# Inside of Frame Buttons =============================================

LabelFrame("LoadFrame") # the frame with the save dialog

# Inside of LabelFrame LoadFrame =============================================

goIn()

Label('Label',text="Load & Run:").grid(sticky='e',row='0')
Label('Name',bg='yellow').grid(column='1',sticky='w',row='0')
Label('Label',text="File (.py):").grid(sticky='e',row='2')
Entry('FileName').grid(column='1',columnspan='3',row='2')
Button('Cancel',text="""Quit""").grid(column='2',sticky='e',row='3')
Button('OK',text="""OK""").grid(column='3',sticky='e',row='3')
Label("IOError",text="Couldn't open file",fg="red").rcgrid(4,0,columnspan=4)

# unlayout container LoadFrame
widget("Cancel").do_command("Me().container().unlayout()")


VAR["LOAD"]=EvDataCmd("""
Data()[0].unlayout()
try:
	push(open(Data()[1].get()+'.py','r'))
	pop().close()
	Data()[2].unlayout()
	setLoadWithCode(True)
	container().setconfig('link',Data()[1].get())
	send('message_execute',"setLoadWithCode(False)")
except IOError: Data()[0].grid()
""",(widget("IOError"),widget("FileName"),container()))



widget("OK").do_command(VAR["LOAD"])
widget("FileName").do_event('<Return>',VAR["LOAD"])

VAR.pop("LOAD",None)


do_receive('LOAD_WIDGET',"""
Par()[0].config(text=Msg())
Par()[1].delete(0,END) # prepare an empty Entry for the user input
Par()[3].unlayout() # IOError
Par()[2].pack() # show the LoadFrame
Par()[1].focus_set() # and focus it
""",(widget("Name"),widget("FileName"),container(),widget("IOError")))



goOut()


LabelFrame("LoadEdit") # the frame with the load dialog

# Inside of LabelFrame LoadEdit =============================================

goIn()

Label('Label',text="Load & Edit:").grid(sticky='e',row='0')
Label('Name',bg='yellow').grid(column='1',sticky='w',row='0')
Label('Label',text="File (.py):").grid(sticky='e',row='2')
Entry('FileName').grid(column='1',columnspan='3',row='2')
Button('Cancel',text="""Quit""").grid(column='2',sticky='e',row='3')
Button('OK',text="""OK""").grid(column='3',sticky='e',row='3')
Label("IOError",text="Couldn't open file",fg="red").rcgrid(4,0,columnspan=4)

# unlayout container LoadFrame
widget("Cancel").do_command("Me().container().unlayout()")


VAR["LOAD"]=EvDataCmd("""
Data()[0].unlayout()
try:
	push(open(Data()[1].get()+'.py','r'))
	pop().close()
	Data()[2].unlayout()
	setLoadForEdit(True)
	container().setconfig('link',Data()[1].get())
	send('message_execute',"setLoadForEdit(False)")
except IOError: Data()[0].grid()
""",(widget("IOError"),widget("FileName"),container()))



widget("OK").do_command(VAR["LOAD"])
widget("FileName").do_event('<Return>',VAR["LOAD"])

VAR.pop("LOAD",None)


do_receive('LOAD_EDIT',"""
Par()[0].config(text=Msg())
Par()[1].delete(0,END) # prepare an empty Entry for the user input
Par()[3].unlayout() # IOError
Par()[2].pack() # show the LoadFrame
Par()[1].focus_set() # and focus it
""",(widget("Name"),widget("FileName"),container(),widget("IOError")))



goOut()



# Inside of Frame Buttons =============================================

LabelFrame("SaveFrame") # the frame with the save dialog

# Inside of LabelFrame SaveFrame =============================================

goIn()

Label(text="Save:").rcgrid(0,0,sticky=E)
Label("Name",text="element",bg="yellow").rcgrid(0,1,sticky=W)
Label(text ="File:"),rcgrid(2,0,sticky=E)
Entry("FileName").rcgrid(2,1,columnspan=3)
Button("Cancel",text="Quit").rcgrid(3,2,sticky=E)
Button("OK",text="OK").rcgrid(3,3,sticky=E)
Label("IOError",text="Couldn't open file",fg="red").rcgrid(4,0,columnspan=4)


# -------------- button commands ----------------------------------


# unlayout container SaveFrame
widget("Cancel").do_command("Me().container().unlayout()")

VAR["SAVE"]=EvDataCmd("""
Data()[0].unlayout()
try:
	push(open(Data()[1].get(),'w'))
	top().write("from DynTkInter import *" + nl() + nl())
	saveWidgets(top(),True)
	pop().close()
	Data()[2].unlayout()
except IOError: Data()[0].grid()
""",(widget("IOError"),widget("FileName"),container()))

widget("OK").do_command(VAR["SAVE"])
widget("FileName").do_event('<Return>',VAR["SAVE"])
widget("Cancel").do_command("Par().unlayout()",container())


# -------------- receiver for message SAVE_WIDGET ----------------------------------

do_receive('SELECTION_CHANGED',"Par().unlayout()",container())

do_receive('SAVE_WIDGET',"""
if Msg() == None: Par()[0].config(text=".")
elif Msg()[1] == -1: Par()[0].config(text=Msg()[0])
else: Par()[0].config(text=Msg()[0]+" [" +str(Msg()[1])+"]") # show the old name and index in Label OldName

Par()[1].delete(0,END) # prepare an empty Entry for the user input
Par()[3].unlayout() # IOError

Par()[2].pack() # show the SaveFrame
Par()[1].focus_set() # and focus it

""",(widget("Name"),widget("FileName"),container(),widget("IOError")))


VAR.pop("SAVE",None)

goOut()


# Inside of Frame Buttons =============================================

LabelFrame("RenameFrame") # the frame with the rename dialog

# Inside of LabelFrame RenameFrame =============================================

goIn()

Label(text="Rename:").rcgrid(0,0,sticky=E)
Label("OldName",bg="yellow").rcgrid(0,1,sticky=W)
Label(text ="New name:"),rcgrid(1,0,sticky=E)
Entry("NewName").rcgrid(1,1,columnspan=2)
Button("Cancel",text="Quit").rcgrid(2,1,sticky=E)
Button("OK",text="OK").rcgrid(2,2)

# -------------- button commands ----------------------------------

# unlayout container RenameFrame
widget("Cancel").do_command("Me().container().unlayout()")

VAR["RENAMEOK"] = EvCmd("""
Me().container().unlayout() # hide the RenameFrame
push(Par().get()) # newname
push(Par().mydata) # oldname and index - because more could have the same name
renameElement(top()[0],pop()[1],pop()) # do the rename
send("SHOW_SELECTION") # refresh show selection - sufficient, because the widget didn't change, only the name for accessing it
""")

# on OK button press and on Return key in NewName Entry perform rename
widget("OK").do_command(VAR["RENAMEOK"],widget("NewName"))
widget("NewName").do_event("<Return>",VAR["RENAMEOK"],widget("NewName"))

VAR.pop("RENAMEOK",None)

# -------------- receiver for the rename message ----------------------------------

do_receive('RENAME_WIDGET',"""
if Msg()[1] == -1: Par()[0].config(text=Msg()[0])
else: Par()[0].config(text=Msg()[0]+" [" +str(Msg()[1])+"]") # show the old name and index in Label OldName
Par()[1].delete(0,END) # prepare an empty Entry for the user input
Par()[1].mydata=Msg() # store old name and index in mydata of the Entry widget
Par()[2].pack() # show the RenameFrame
Par()[1].focus_set() # and focus it
""",(widget("OldName"),widget("NewName"),container()))

do_receive('SELECTION_CHANGED',"Par().unlayout()",container())

# End of: Inside of LabelFrame RenameFrame =============================================

goOut()

# End of: Inside of Frame Buttons =============================================

goOut()

# Inside LabelFrame Widget Selection ====================================================

DynImport("SelectionShow")
pack()

# End of: Inside LabelFrame WidgetSelection ====================================================

goOut()

# Inside Toplevel Window DynTkInterGuiCreator  - Frame for DetailedLayout ====================




# Inside Toplevel Window DynTkInterGuiCreator  - LabelFrame ConfigOptions =====================


# Inside Toplevel Window DynTkInterGuiCreator  =====================

# can't only leave it by:

